<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-09T14:31:28+09:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Impossible is not a fact. It’s an opinion</title><subtitle>SW Engineer</subtitle><author><name>Jaehwan Park</name></author><entry><title type="html">루소 - 에밀(1) 식물은 재배로, 인간은 교육으로 만들어진다.</title><link href="http://localhost:4000/2018/10/11/13_emile_chapter1/" rel="alternate" type="text/html" title="루소 - 에밀(1) 식물은 재배로, 인간은 교육으로 만들어진다." /><published>2018-10-11T00:00:00+09:00</published><updated>2018-10-11T00:00:00+09:00</updated><id>http://localhost:4000/2018/10/11/13_emile_chapter1</id><content type="html" xml:base="http://localhost:4000/2018/10/11/13_emile_chapter1/">&lt;p&gt;&lt;img src=&quot;/assets/images/post/13_1.png&quot; alt=&quot;pic1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;가상의-인물-에밀은&quot;&gt;가상의 인물 에밀은?&lt;/h2&gt;
&lt;p&gt;몸과 마음이 모두 건강하지만 특별히 뛰어난 자질은 없는 에밀이라는 고아를, 한 사람의 교사가 그 아이가 태어나서 자라나 결혼하기까지,
‘자연’이라고 하는 위대한 스승의 지시에 따라 어떤 식으로 키워나가는지 5편에 걸쳐 소설 형식으로 서술한 것이 이 책의 주된 내용이다.&lt;/p&gt;

&lt;h2 id=&quot;식물은-재배로-인간은-교육으로-만들어진다&quot;&gt;식물은 재배로, 인간은 교육으로 만들어진다.&lt;/h2&gt;

&lt;p&gt;그러므로 인간의 위대한 능력도 사용방법을 모르면 무용지물이다. &lt;br /&gt;
약하게 태어났으므로 힘이, 아무것도 없이 태어났으므로 도움이, 분별력 없이 태어났으므로
판단력이 필요한 것이다.  &lt;br /&gt;
이 모든것은 교육으로 얻어진다.&lt;/p&gt;

&lt;h2 id=&quot;아기에게는-어머니의-보호와-관심이-필요하다&quot;&gt;아기에게는 어머니의 보호와 관심이 필요하다.&lt;/h2&gt;

&lt;p&gt;어머니와 아이의 의무는 상호적이다. 한편에서 의무를 소홀히 하게되면 다른 편도 태만하게 된다.
아이는 당위 이전에 어머니를 사랑해야 한다. 만일 습관에 의해서도 본능이 강화되지 않으면
애정은 싹트기 전에 이미 죽어 버리고 결국 자연의 길에서 벗어나게 된다.
이와는 반대로 자연의 길을 벗어나도록 유혹하는 경우가 있는데 양육을 게을리 하거나
아이를 지나치게 귀하게 대해 오히려 약골로 만드는 경우이다.
이는 아이를 일시적인 위험에서는 벗어나게 할 수 있을지는 모르지만 나약한 유년기를 연장시킴으로써
후에 더 큰 고통을 감수하는 결과를 초래한다.&lt;/p&gt;

&lt;p&gt;자연 그대로의 모습으로 아이를 보존하려면 태어나는 순간부터 방치하지 말고 잘 보살펴야 한다. 최고의 유모는 어머니이며 최고의 교사는 아버지 이다.
부모는 자신의 직분에따라 혹은 방법에 있어 일치해야 하고 협력해야 한다.
아이에게는 유능한 교사보다도 분별력 있는 아버지의 교육이 낫다.&lt;/p&gt;

&lt;h2 id=&quot;가장-좋은-습관은-어떠한-습관에도-물들지-않는-습관이다&quot;&gt;가장 좋은 습관은 어떠한 습관에도 물들지 않는 습관이다.&lt;/h2&gt;

&lt;p&gt;아이들에게 꼭 길러주어야 할 유일한 습관은 어떠한 습관에도 물들이지 않는 습관이다.
신체에 자연적인 습관을 지니게 함으로써 언제나 자기의 의지로 관철할 수 있도록 하여 일찍부터 앞으로 다가올
자유 경쟁의 시기에 대비해서 힘을사용할 능력을 길러주는 것이 좋다.&lt;/p&gt;

&lt;h2 id=&quot;울어야할-이유도-없는데-우는-아이는-없으며-요청과-명령을-구분해야-한다&quot;&gt;울어야할 이유도 없는데 우는 아이는 없으며, 요청과 명령을 구분해야 한다.&lt;/h2&gt;
&lt;p&gt;아이는 사물의 저항만 받고 인간의 의지에 의한 저항은 받지 않는다면 결코 반항적이지도 않고 성을 내는
일도 없이 건강하게 자라난다.
그러나 아이가 하자는 대로 하는 것과 아이를 거역하지 않는 것은 큰 차이가 있다.
갓난아기의 최초의 울음은 요청이다. 그런데 여기레 주의를 기울이지 않으면 이 울음은 마침내 명령으로 바뀐다.
아이는 처음에는 도움을 요청하지만 나중에는 봉사를 요구하게 된다.&lt;/p&gt;

&lt;p&gt;그래서 처음에는 자신의 나약함 때문에 의타심이 생기지만 나중에는 권력과 지배의 개념이 싹트게 된다.
아이가 아무말도 않고 애써 손을 내밀 때에는 거리감이 없기 때문에 손을 닿을 줄 알고 믿고 있는 것이다.
그러나 그가 손을 내밀며 칭얼거릴 때에는 그 물건을 가까이 밀어주거나 갖다달라고 명령하는 것이다.&lt;/p&gt;

&lt;p&gt;첫번째 경우에는 아이를 물건 가까이 데려다 주는 것이 현명하지만 두번째 경우에는 울음소리를 들은척 하지 말라.&lt;/p&gt;

&lt;p&gt;아이들은 주위 사람들을 제 마음대로 부릴 수 있는 도구로 알게되면 폭군이 된다.
이것은 아이의 천부적은 지배욕에서 비롯되는 것이 아니라 어른들이 가르쳐준 탓이다.
왜하면 남의 손을 빌어서 행동하는 것, 말 한마디로 세계를 움직일 수 있다는 것을 깨우치는데는 많은 경험이 필요 없기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;아이를-선량하게-키우려면&quot;&gt;아이를 선량하게 키우려면&lt;/h2&gt;
&lt;p&gt;모든 악은 약한데서 부터 발생한다.
그러므로 아이들을 강하게 만들면 그들은 선량해진다.
무엇이든 할 수 있는 사람은 결코 나쁜짓을 하지 않는다.&lt;/p&gt;

&lt;p&gt;특별한 인간을 만들기 위해서 무엇보다 필요한 것은 자연의 질서에 순응하는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;자연의-길에서-벗어나지-않게-하는-원칙&quot;&gt;자연의 길에서 벗어나지 않게 하는 원칙&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;첫번째 원칙, 아이가 자연에게 받은 모든 힘을 사용하도록 내버려두어야 한다.&lt;/li&gt;
  &lt;li&gt;두번째 원칙, 육체적으로 필요한 것 중 아이에게 부족한 것은 지성이든 힘이든 간에 보충해주어야 한다.&lt;/li&gt;
  &lt;li&gt;세번째 원칙, 아이를 도와줄 때는 실제로 필요한 일만 한정해서 도와주어야 하고, 환상이나 이유없는 욕망에 동조해서는 안된다.&lt;/li&gt;
  &lt;li&gt;네번재원칙, 아이의 언어와 표정을 주의 깊게 연구해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이상의 원칙은 근본정신은 아이에게 진정한 자유는 가능한 많이 부여하고 지배욕은 줄임으로써 독립적으로 행동하도록 하는 반면
의타심을 막아 보자는 데 있다. 이렇게 하면 자신의 능력이 미치지 못하는 것에는 헛된 욕구를 느끼지 못할 것 이다.&lt;/p&gt;

&lt;h2 id=&quot;그는-살고-있다-그러나-자기가-살고-있다는-것을-알지-못한다&quot;&gt;그는 살고 있다. 그러나 자기가 살고 있다는 것을 알지 못한다.&lt;/h2&gt;
&lt;p&gt;유년기의 초기 발달은 모두가 거의 동시에 일어난다.
아이들은 말하는 것도, 걷는 것도 거의 동시에 배운다. 이때까지는 태내에 있을 때와 조금도 다를 바가 없다.
그때는 아무런 감정이나 관념도 없이 그저 감각만 있을 뿐이다.
심지어 자기가 존재하고 있다는 것조차 의식하지 못한다.&lt;/p&gt;

&lt;!--
## Summary :
1. 이글의 요약을 작성한다.

## 제목
내용

### 소제목
내용

--&gt;

&lt;!-- more --&gt;

&lt;!-- Tip

@카테고리
programming : 프로그래밍
business : 경제/경영 내용
blog : 개인적인 내용 및 생각
machinelearning : 머신러닝 관련 내용
android : 안드로이드 관련 내용 (rxandroid)
project : 개인프로젝트 관련 내용
book : 책 읽은 후기 작성
movie : 영화
writting : 작문
essay : 수필
travel : 여행관련
study : 스터디한 내용 (영어), TED 등등


@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="독후감" /><summary type="html"></summary></entry><entry><title type="html">글쓰기가 필요하지 않은 인생은 없다.</title><link href="http://localhost:4000/2018/09/05/12_everyone_need_to_writing/" rel="alternate" type="text/html" title="글쓰기가 필요하지 않은 인생은 없다." /><published>2018-09-05T00:00:00+09:00</published><updated>2018-09-05T00:00:00+09:00</updated><id>http://localhost:4000/2018/09/05/12_everyone_need_to_writing</id><content type="html" xml:base="http://localhost:4000/2018/09/05/12_everyone_need_to_writing/">&lt;p&gt;&lt;img src=&quot;/assets/images/post/12_1.png&quot; alt=&quot;pic1&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;prolog&quot;&gt;Prolog&lt;/h2&gt;
&lt;p&gt;나는 글쓰기를 잘하고싶다는 생각을 막연하게 한다. 그러다 조금씩 글쓰기 관련 책을 읽는다.
처음 읽은 책은 “유시민의 글쓰기 특강”이었다.
이번에 읽은 책은 “글쓰기가 필요하지 않은 인생은 없다”라는 책인데 작가는 글쓰기를 잘쓰는 것
이상으로 글쓰기가 주는 다양한 효과들에 대해서 알려준다.&lt;/p&gt;

&lt;p&gt;나같은 경우는 글쓰기가 나에게 내재되어 있는 창작욕구를 충족시키기 위한 수단이다.
작가는 글쓰기를 힐링과 자신을 채우는 시간으로 쓰는 방법을 제시한다.&lt;/p&gt;

&lt;p&gt;나에게 글쓰기할때 가장 어려운점은 어떤 것을 쓰느냐 인데
이 책은 어떤 글을 쓰는지 방향을 제시해주는 책이었다.&lt;/p&gt;

&lt;p&gt;책에서 제시하는 몇가지 예를 들면 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;마지막으로 하루 10시간 이상 무언가에 몰입한 적은 언제인가?&lt;/li&gt;
  &lt;li&gt;인생에서 가장간절하게 무언가를 염원한 시기는 언제인가?&lt;/li&gt;
  &lt;li&gt;그렇다면 무엇을 얼마나 어떻게 염원했는가?&lt;/li&gt;
  &lt;li&gt;나를 가장 열광시키는 가치 세가지는?&lt;/li&gt;
  &lt;li&gt;나라는 사람을 표현하는 한줄의 문구를 작성한다면?&lt;/li&gt;
  &lt;li&gt;스스로 어디까지 성장할 수 있다고 생각하는가?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이외에도 다양한 주제들, 상처를 치료하는 글쓰기, 자서전쓰기, 책쓰기 등등 다양한 내용들이 많다.&lt;/p&gt;

&lt;!--
## Summary :
1. 이글의 요약을 작성한다.

## 제목
내용

### 소제목
내용

--&gt;

&lt;!-- more --&gt;

&lt;!-- Tip

@카테고리
programming : 프로그래밍
business : 경제/경영 내용
blog : 개인적인 내용 및 생각
machinelearning : 머신러닝 관련 내용
android : 안드로이드 관련 내용 (rxandroid)
project : 개인프로젝트 관련 내용
book : 책 읽은 후기 작성
movie : 영화
writting : 작문
essay : 수필
travel : 여행관련
study : 스터디한 내용 (영어), TED 등등


@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="독후감" /><summary type="html">Prolog 나는 글쓰기를 잘하고싶다는 생각을 막연하게 한다. 그러다 조금씩 글쓰기 관련 책을 읽는다. 처음 읽은 책은 “유시민의 글쓰기 특강”이었다. 이번에 읽은 책은 “글쓰기가 필요하지 않은 인생은 없다”라는 책인데 작가는 글쓰기를 잘쓰는 것 이상으로 글쓰기가 주는 다양한 효과들에 대해서 알려준다.</summary></entry><entry><title type="html">무인양품 - 보이지 않는 마케팅</title><link href="http://localhost:4000/book/2018/08/07/11/" rel="alternate" type="text/html" title="무인양품 - 보이지 않는 마케팅" /><published>2018-08-07T00:00:00+09:00</published><updated>2018-08-07T00:00:00+09:00</updated><id>http://localhost:4000/book/2018/08/07/11</id><content type="html" xml:base="http://localhost:4000/book/2018/08/07/11/">&lt;p&gt;&lt;img src=&quot;/assets/images/post/11_1.jpg&quot; alt=&quot;pic1&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;무인양품---보이지-않는-마케팅&quot;&gt;무인양품 - 보이지 않는 마케팅&lt;/h2&gt;

&lt;p&gt;무지라는 브랜드는 이미 많은 사람들에게 익숙한 브랜드이다. &lt;br /&gt;
무지를 보면 떠오르는 것이 무엇일까? &lt;br /&gt;
아마도 간결하다 심플하다 무채색의 컬러로 무난하다라는 느낌이 아닐까&lt;/p&gt;

&lt;h3 id=&quot;muji는-가장-평범한-형태를-지향한다&quot;&gt;MUJI는 “가장 평범한 형태를 지향한다”&lt;/h3&gt;
&lt;p&gt;무지는 심플하고, 단순하게 만든다. &lt;br /&gt;
그리고 다른 브랜드와 다르게 “특징이 없는것” 이 특징이다.&lt;/p&gt;

&lt;p&gt;브랜드란 소비자에게 자사의 상품이 다른 상품과 어떻게 다른지 명확히 인식하기 위한 도구이다. &lt;br /&gt;
그래서 일반적인 브랜드는 타사와 다른 자신만의 특징을 호소한다. &lt;br /&gt;
반면 MUJI는 다른 많은 브랜드가 차지하고 있지 않은 그 외 “기타”의 포지셔닝을 지향한다. &lt;br /&gt;
이것이야말로 MUJI의 진정한 강점이다. 이로써 세상의 수많은 브랜드를 제외한 “기타여백전부”를
포괄하는 브랜드가 되었기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;이거면-됬어-라는-사고방식&quot;&gt;“이거면 됬어” 라는 사고방식&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/11_3.png&quot; alt=&quot;pic3&quot; /&gt;
MUJI의 상품은 심플하고 보편적이다. &lt;br /&gt;
세계 곳곳의 문화의 벽을 초월한다. 그러기 위해 최대공약수 개념을 활용한다. &lt;br /&gt;
되도록 많은 사람들이 ‘좋다’고 생각하는 상품을 개발하려 한다.&lt;/p&gt;

&lt;p&gt;“이거면 됬어”라는 사고방식으로 제품을 만든다. &lt;br /&gt;
이거면됬어라는 사고가 특정 Target에 명확한 제품보다는 보다 많은 사람들이 좋아할 수 있는
범용적인 제품을 만들 수 있게 해준다. &lt;br /&gt;
이를 통해 합리적 만족도가 큰 시장을 선점할 수 있도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;이유를-전달한다&quot;&gt;“이유를 전달한다”&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/11_2.png&quot; alt=&quot;pic2&quot; /&gt;
MUJI는 왜 이런 상품을 만들었는지 고객에게 반드시 알리려 한다. &lt;br /&gt;
MUJI의 광고문구도 ‘이유 있게 싸다’이다. &lt;br /&gt;
MUJI는 이유를 전달함으로 써 MUJI라는 새로운 컨셉을 사람들에게 이해시키려 한다. &lt;br /&gt;
MUJI는 언제나 설명을 중요시한다.&lt;/p&gt;

&lt;!--
## Summary :
1. 이글의 요약을 작성한다.

## 제목
내용

### 소제목
내용

--&gt;

&lt;!-- more --&gt;

&lt;!-- Tip

@카테고리
programming : 프로그래밍
business : 경제/경영 내용
blog : 개인적인 내용 및 생각
machinelearning : 머신러닝 관련 내용
android : 안드로이드 관련 내용 (rxandroid)
project : 개인프로젝트 관련 내용
book : 책 읽은 후기 작성
movie : 영화
writting : 작문
essay : 수필
travel : 여행관련
study : 스터디한 내용 (영어), TED 등등


@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="독후감" /><summary type="html">무인양품 - 보이지 않는 마케팅</summary></entry><entry><title type="html">Python - if __name__ == “__main__” 은 왜쓰는거지?</title><link href="http://localhost:4000/programming/2018/01/17/10/" rel="alternate" type="text/html" title="Python - if __name__ == &quot;__main__&quot; 은 왜쓰는거지?" /><published>2018-01-17T00:00:00+09:00</published><updated>2018-01-17T00:00:00+09:00</updated><id>http://localhost:4000/programming/2018/01/17/10</id><content type="html" xml:base="http://localhost:4000/programming/2018/01/17/10/">&lt;!-- more --&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary :&lt;/h2&gt;
&lt;p&gt;Python은 자동으로 실행되는 Main 함수가 없습니다. Python은 메인 함수가 없는 대신에 들여쓰기하지 않은코드를
실행하게 됩니다. 다만 함수나 클래스는 정의되지만, 바로 실행되지 않습니다.
아래 코드와 같이 if 구문은 최상위 코드(Level 0)코드 입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 &lt;strong&gt;name&lt;/strong&gt; 은 현재의 모듈의 이름을 담고 있는 내장 변수 입니다.
그런데 차이점은 아래와 같습니다.
python B.py로 실행하면, &lt;strong&gt;name&lt;/strong&gt; 은 &lt;strong&gt;main&lt;/strong&gt; 이라는 값이 들어갑니다.
만약 Import 되어 사용된다면 &lt;strong&gt;name&lt;/strong&gt; 은 모듈명이 됩니다.&lt;/p&gt;

&lt;p&gt;예를들면 A.py, B.py가 있다고 해봅시다.&lt;/p&gt;
&lt;h5 id=&quot;apy&quot;&gt;A.py&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;function A.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top-level A.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A.py 실행됨&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A.py가 임포트됨&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;bpy&quot;&gt;B.py&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;top-level in B.py&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B.py를 직접 실행&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B.py가 임포트되어 사용&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;실행하면 어떻게 될까요?
python B.py를 실행해보면 아래와 같이 나옵니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;top-level A.py
A.py가 임포트되어 사용됨
A
top-level in B.py
function A.py
B.py가 직접 실행
__main__&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="python" /><summary type="html"></summary></entry><entry><title type="html">Tensorflow lite 알아보기</title><link href="http://localhost:4000/machinelearning/2018/01/04/9/" rel="alternate" type="text/html" title="Tensorflow lite 알아보기" /><published>2018-01-04T00:00:00+09:00</published><updated>2018-01-04T00:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2018/01/04/9</id><content type="html" xml:base="http://localhost:4000/machinelearning/2018/01/04/9/">&lt;!-- more --&gt;

&lt;h2 id=&quot;summary-&quot;&gt;Summary :&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;텐서플로 라이트는 모바일 및 IOT환경에서 빠른 추론이 가능하도록 한 텐서플로입니다.&lt;/li&gt;
  &lt;li&gt;기존 protobuf 방식에서 flatbuffer 로 변경해서 속도 향상&lt;/li&gt;
  &lt;li&gt;NNAPI(Neural network API) 를 통해 Hardware 가속 지원(Android 8.1 이상에서)&lt;/li&gt;
  &lt;li&gt;Quantized(양자화)를 통한 모델파일 감소 및 연산속도 개선&lt;/li&gt;
  &lt;li&gt;Cross platform 지원 (Android &amp;amp; iOS)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;introduction-to-tensorflow-lite&quot;&gt;Introduction to tensorflow lite&lt;/h2&gt;
&lt;p&gt;텐서플로 라이트는 텐서플로의 모바일과 embedded device를 위한 경량화 버젼이다.
TFLite는 on-device에서 ML을 low-latency와 small binary size로 동작하게 해준다.
또한 hardware acceleration 을 Android Neural Network API를 통해 사용할 수 있도록 해준다.
TFLite는 다양한 테크닉을 사용해 low latency와 kernel optimizing 을 사용한다.
pre-fused activations, quantized kernels 들을 사용해 작고 빠른 모델을 사용할 수 있게 한다.&lt;/p&gt;

&lt;p&gt;Tensroflow lite에서는 기존에 사용하던 protocol-buf 대신에 flatbuffer를 사용한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Flatbuffer는 오픈소스이며, protocol-buf 대비 차이점 &lt;br /&gt;
데이터에 엑세스하기 전에 2차 표현된 구문 분석/압축풀기 단계를 거치지 않아도 되고, 코드의 footprint가
protocol-buf보다 훨씩 작다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flatbuffer를-쓰는-이유&quot;&gt;flatbuffer를 쓰는 이유?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;데이터 송/수신 시 파싱/언패킹을 하지 않아도 된다.&lt;/li&gt;
  &lt;li&gt;메모리 효율성이 높고, 빠른 속도를 보장한다.&lt;/li&gt;
  &lt;li&gt;유연성이 높다(사용하는 데이터 타입에 대한)&lt;/li&gt;
  &lt;li&gt;사용하기 편리하다.&lt;/li&gt;
  &lt;li&gt;크로스 플랫폼, 종속성 없이 사용 가능
&lt;img src=&quot;/assets/images/post/10_03.png&quot; alt=&quot;pic3&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Flat buffer의 성능비교&lt;/figcaption&gt;

&lt;p&gt;좀더 상세한 설명 및 Flatbuffer를 만드는 방법은 아래의 링크를 참고하세요 &lt;br /&gt;
&lt;a href=&quot;http://gompangs.tistory.com/57&quot;&gt;Flatbuffer(블로그)&lt;/a&gt;
&lt;a href=&quot;https://developers.google.com/protocol-buffers/?hl=en&quot;&gt;Protocol buffer(google developers)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tensorflow-lite-architecture&quot;&gt;Tensorflow lite architecture&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/post/10_01.png&quot; alt=&quot;pic1&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;텐서플로 라이트 아키텍쳐&lt;/figcaption&gt;
&lt;p&gt;아키텍쳐 간단한 설명&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Trained Tensorflow model
학습시킨 모델파일을 준비(pb)한다.&lt;/li&gt;
  &lt;li&gt;Tensorflow Lite Converter
converter를 통해서 pb 파일을 tensorflow lite 방식으로 변경합니다.
변경할때 Quantized 를 수행해서 모델의 크기를 줄입니다.&lt;/li&gt;
  &lt;li&gt;Tensorflow Lite Model file(.tflite or .lite)
Convert가 잘동작되었다면 .lite파일이 생성됩니다.(예제에 있는 .tflite는 .lite파일을 이름을 바꿔놓은 것이다)&lt;/li&gt;
  &lt;li&gt;Interpreter
인터프리터는 임베디드 디바이스 및 모바일에서 오버헤드가 낮은 장치에서도 잘 동작하게 만들어져 있습니다.
Tensorflow lite는 적은 의존성으로 단순한 장치에서 사용하기 쉽게 만들어져 있습니다.
Flatbuffer를 사용하고 Tensorflow lite는 tensorflow에 있는 함수중에서 일부가 지원되고 지원되지 않는 함수도
있습니다. &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/g3doc/tf_ops_compatibility.md&quot;&gt;지원하는함수/지원하지않는함수 보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Android Neural Network API
NNAPI는 Android 8.1 이상의 시스템 이미지에서 사용할 수 있습니다.
특징은 아래와 같습니다.
    &lt;ul&gt;
      &lt;li&gt;속도 : 신경망프로세싱에 특화된 HW를 사용해 범용 CPU보다 훨씬 빠른 계산을 제공한다.&lt;/li&gt;
      &lt;li&gt;NNAPI System architecture
&lt;img src=&quot;/assets/images/post/10_04.png&quot; alt=&quot;pic4&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;figcaption class=&quot;caption&quot;&gt;NNAPI System architecture&lt;/figcaption&gt;

&lt;h2 id=&quot;이제-적용해볼까요&quot;&gt;이제 적용해볼까요?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;기존 모델파일(.pb)를 tflite 형식으로 변경(.lite or .tflite)&lt;/li&gt;
  &lt;li&gt;toco 모듈을 통해 tflite 형식으로 변경
    &lt;ul&gt;
      &lt;li&gt;모델파일의 내용을 dump 해서 얼마나 달라졌는지 확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;변경된 모델을 tensorflow lite Demo앱을 통해 테스트&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;trained-tensorflow-model&quot;&gt;Trained tensorflow Model&lt;/h2&gt;
&lt;p&gt;우선 미리 학습된 model 파일을 가지고 시작하거나, retrain 수행 후 나온 파일을 가지고 할 수 있습니다.
모든 모델이 변환된다고 보장하긴 힘들고 현재는 (Mobilenet, Inception, 등등) 구글에서 제공하고 있는
모델들에 대해서는 동작이 됩니다. 모든 모델이 되지 않는 이유는 Tenforflow lite에서 convert되는 함수가
모든 함수를 지원하지 않고 몇몇 함수들이 빠져 있기 때문 입니다. 어떤함수가 안되는지는 아래 링크에서
확인할 수 있습니다. &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/g3doc/tf_ops_compatibility.md&quot;&gt;지원하는함수/지원하지않는함수 보기&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tensorflow-lite-converter&quot;&gt;Tensorflow Lite Converter&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;우선 bazel 빌드로 toco 모듈을 빌드해야 합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bazel build tensorflow/contrib/lite/toco:toco&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;빌드가 완료되면 bizel-bin으로 toco로 아래의 옵션으로 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bazel-bin/tensorflow/contrib/lite/toco/toco -- \
--input_file=$(pwd)/mobilenet_v1_1.0_224/frozen_graph.pb \
--input_format=TENSORFLOW_GRAPHDEF \
--output_format=TFLITE \
--output_file=/tmp/mobilenet_v1_1.0_224.lite \
--inference_type=FLOAT \
--input_type=FLOAT \
--input_arrays=input \
--output_arrays=MobilenetV1/Predictions/Reshape_1 \
--input_shapes=1,224,224,3 \&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;하지만 위의 방법(tensorflow lite 페이지에 있는 가이드)으로 하면 실제 Android App에 업로드했을 때
잘 동작되지 않습니다. 그래서 옵션중에 아래의 옵션을 추가해야 하고, 모델 파일도 FLOAT이 아닌 QUANTIZED_UINT8의 옵션을
추가해야 합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--inference_type=QUANTIZED_UINT8 \
--inference_input_type=QUANTIZED_UINT8 \
--std_values=128 \
--default_ranges_min=0 \
--default_ranges_max=6 \&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Convert 할때 오류발생 및 어떤 차이점이 있는지 확인하는 방법&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--dump_graphviz=/덤프를 저장할 경로&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tensorflow-lite-demo-app&quot;&gt;Tensorflow Lite Demo App&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;데모 앱은 아래의 위치에서 다운받을 수 있습니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/lite/java/demo&quot;&gt;코드위치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/10_02.png&quot; alt=&quot;pic1&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Dot 파일이 생성됨.(Graphiz 용 파일)&lt;/figcaption&gt;
&lt;p&gt;위의 파일을 바로 graphiz를 통해서 확인해도 되지만, 파일이 큰 경우 잘 열리지 않을 수 있어서
graphiz를 pdf파일로 변환해서 확인할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dot -Tpdf -O 파일명.dot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;tensorflow-lite-model-file&quot;&gt;Tensorflow Lite Model File&lt;/h2&gt;
&lt;p&gt;이제 (.lite 파일 .tflite) 파일이 생성되었습니다.
.lite 와 .tflite의 차이점은 무었일까요? Demo 앱에서는 모델의 파일명이 .tflite 이고 convert 할때는
.lite를 사용하는데요, 결론을 말씀드리면 차이가 없습니다.
두개는 같은형식이고 확장자 명만 다르게 한 것 입니다.&lt;/p&gt;

&lt;p&gt;하지만 tensorflow demo앱에서는 .tflite로 파일명을 변경해주셔야 합니다!
왜냐하면 App을 빌드할때 모델파일은 압축을 하면 안되는데요 그때 압축하지 않는 옵션이 tflite만 추가되어 있습니다. &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/app/build.gradle#L29&quot;&gt;코드위치(build.gradle)&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gradle&quot; data-lang=&quot;gradle&quot;&gt;&lt;span class=&quot;n&quot;&gt;aaptOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noCompress&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tflite&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;아래처럼 형식을 추가할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-gradle&quot; data-lang=&quot;gradle&quot;&gt;&lt;span class=&quot;n&quot;&gt;aaptOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noCompress&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tflite&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;noCompress&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lite&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 모델파일에 맞게 변수를 수정해주면 됩니다. &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/app/src/main/java/com/example/android/tflitecamerademo/ImageClassifier.java#L46&quot;&gt;코드위치(ImageClassifier.java)&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/** Name of the model file stored in Assets. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MODEL_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mobilenet_quant_v1_224.tflite&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** Name of the label file stored in Assets. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;labels.txt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** Number of results to show in the UI. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESULTS_TO_SHOW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** Dimensions of inputs. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIM_BATCH_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIM_PIXEL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIM_IMG_SIZE_X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;224&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DIM_IMG_SIZE_Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;224&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;참고링크&quot;&gt;참고링크&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/mobile/tflite/&quot;&gt;Introduction to TensorFlow Lite&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://developer.android.com/ndk/guides/neuralnetworks/index.html&quot;&gt;Neural Networks API&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/README.md&quot;&gt;Github : TensorFlow Lite&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/toco/g3doc/cmdline_reference.md&quot;&gt;Github : TensorFlow Lite Optimizing Converter command-line reference&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/toco/g3doc/cmdline_examples.md&quot;&gt;Github : TensorFlow Lite Optimizing Converter command-line examples&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/g3doc/tf_ops_compatibility.md&quot;&gt;Github : TensorFlow Compatibility Guide&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/tensorflow/tensorflow/issues/15122&quot;&gt;Issue : tensorflow lite: error when convert frozen model to lite format&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://androidkt.com/image-classify-tensorflow-lite/&quot;&gt;Image Classify Using TensorFlow Lite&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://androidkt.com/train-image-classifier/&quot;&gt;Train Image classifier with TensorFlow&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;http://androidkt.com/tenserflow-lite/&quot;&gt;http://androidkt.com/tenserflow-lite/&lt;/a&gt;&lt;/p&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="머신러닝" /><category term="텐서플로" /><summary type="html"></summary></entry><entry><title type="html">Lecture 1~4. OpenAI Gym and Dummy Q-learning</title><link href="http://localhost:4000/machinelearning/2017/11/03/8/" rel="alternate" type="text/html" title="Lecture 1~4. OpenAI Gym and Dummy Q-learning" /><published>2017-11-03T00:00:00+09:00</published><updated>2017-11-03T00:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2017/11/03/8</id><content type="html" xml:base="http://localhost:4000/machinelearning/2017/11/03/8/">&lt;!-- more --&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://hunkim.github.io/ml/&quot;&gt;Deep Reinforcement Learning을 수강&lt;/a&gt;하며 정리하는 페이지 입니다.
아래의 Lecture를 듣고 필요한 내용만 정리했습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lecture 1 : 수업의 개요&lt;/li&gt;
  &lt;li&gt;Lecture 2 : OpenAI GYM 게임해보기&lt;/li&gt;
  &lt;li&gt;Lecture 3 : Dummy Q-Learning&lt;/li&gt;
  &lt;li&gt;Lecture 4 : Q-Learning exploit  exploration and discounted reward&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reinforcement-learning-강화학습이란&quot;&gt;Reinforcement Learning (강화학습)이란?&lt;/h2&gt;
&lt;p&gt;강화학습 하면 처음 떠오르는 것이 Dog traning이다. 좋은 행동을 하면 상을주고, 나쁜 행동은 벌을 줘서
훈련시키는 방법이다. 하지만 강아지에게만 유용한 방법은 아니고, 사람들도 비슷한 방법으로 학습하게 된다.
우리가 살아오며 다년간의 칭찬과 꾸중을 통해 어떤 것이 좋은행동이고, 어떤것이 하지 말아야할 행동인지를 배운다.&lt;/p&gt;

&lt;p&gt;이런 어떤 Action에 대한 reward를 이용해 학습하는 것이 강화 학습이다.&lt;/p&gt;

&lt;h2 id=&quot;reinforcement-learning&quot;&gt;reinforcement Learning&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DRL_01_00.png&quot; alt=&quot;Frozen Lake World (출처:http://hunkim.github.io/ml/)&quot; /&gt;
OpenAI GYM의 첫번째 예제인 Frozen Lake world에 대해서 살펴 보자.
Agent(펭귄)을 S(Start point)에서 G(Ground)로 이동시키는 것이목적이고, 이동할때 H(hole)에 빠지지 않도록 해야 한다.&lt;/p&gt;

&lt;p&gt;기본 환경은 2개로 나눠진다. Actor(펭귄) 과 Environment(Frozen lake)
여기서 Actor는 환경속에서 행동을하게 되고, 행동에 따라  observation 을 하게되고, 매 순간마다(행동이 끝날때) reward를 받게 된다.&lt;/p&gt;

&lt;h2 id=&quot;openai-gym-개발-환경&quot;&gt;OpenAI GYM 개발 환경&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://gym.openai.com/read-only.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;기본 개발 환경
    &lt;blockquote&gt;
      &lt;p&gt;1) Tensorflow
sudo apt-get install python-pip python-dev
pip install tensorflow (or pip install tensorflow-gpu)
2) OpenAI GYM
sudo apt install cmake
apt-get install zlib | g-dev
sudo -H pip install gym
sudo -H pip install gym[atari]&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;설치후 동작 확인 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예제1. Key input을 사용해 직접 게임해보는 방법(&lt;a href=&quot;https://github.com/jaehwant/machine_learning_study/blob/master/01_0_play_frozenlake.py&quot;&gt;예제소스:github&lt;/a&gt;)  &lt;br /&gt;
윈도우환경 PyCharm에서는 키가 정상적으로 입력이 안되고 CMD 창에서 실행해야 함.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym.envs.registration&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_GetchWindows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;msvcrt&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;msvcrt&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msvcrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;getch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_GetchWindows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Macro&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# key mapping&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#register frozenlake with is_slippery false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'gym.envs.toy_text:FrozenLakeEnv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map_name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'4x4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'is_slippery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Game aborted!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#에이전트의 움직임&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#움직임에 대한 결과값들&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 화면 출력&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;State : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Action:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Reward:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Info:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#도착하면 게임을 끝낸다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finished with reward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;q-learning&quot;&gt;Q-Learning&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DRL_01_01.png&quot; alt=&quot;Q-Function (state-action value function) (출처:http://hunkim.github.io/ml/)&quot; /&gt;
Q-Function 은 아래와 같은 입력과 Reward를 가지고 있다. &lt;br /&gt;
1) State - 현재의 내 상태 &lt;br /&gt;
2) Action - 내가 취할 Action &lt;br /&gt;
3) Quality(reward) - 내가 Action을 취했을 때 받을 수 있는 점수&lt;/p&gt;

&lt;p&gt;예를들면 &lt;br /&gt;
Q(s1,LEFT) : 0 &lt;br /&gt;
Q(s1,RIGHT) :  0.5 &lt;br /&gt;
Q(s1,UP) : 0 &lt;br /&gt;
Q(s1,DOWN) : 0.3&lt;/p&gt;

&lt;p&gt;위의 상태가 있다고 하면, 현재 state(위치)는 s1이고, 여기서 4가지 Action을 취할 수 있는데 각 Action을 취했을 때
얻을 수 있는 Reward가 있다. 여기서 어떻게 이동해야 할까? 랜덤으로 이동한다 or Reward가 max인 값으로 이동한다. &lt;br /&gt;
위 처럼 어떻게 이동할지를 결정하는 것을 Q Policy 라고 한다. &lt;br /&gt;
우선 항상 max값을 찾아서 이동하는 방식을 가정해보자.&lt;/p&gt;

&lt;h2 id=&quot;dummy-q-learning-algorithm&quot;&gt;Dummy Q-learning algorithm&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DRL_01_03.png&quot; alt=&quot;Learning Q Table:optimal policy (출처:http://hunkim.github.io/ml/)&quot; /&gt;
기존처럼 argmax(항상 최대 reward를 받는 쪽으로 이동)하는경우, 아래 처럼 최적의 경로를 찾을 수가 없다.
왜냐하면 안가본길에 대해서 reward가 낮을땐 해당 길로 갈 수 없게 되어있다.
그럼 안가본길을 가게 하려면 떻게 해야할까?&lt;/p&gt;

&lt;h2 id=&quot;exploit-vs-exploration-problem&quot;&gt;Exploit vs Exploration Problem&lt;/h2&gt;
&lt;p&gt;기존값을 이용하는 방식과 모험을 하는 방식이 있어야 한다.
즉 새로운 길을 찾으려면 reward가 낮더라도 그 길을 가 봐야 한다.
그럼 Reward가 낮은 길을 가보려면 어떤 방법이 있을까?&lt;/p&gt;

&lt;h2 id=&quot;e-greedy-policy&quot;&gt;E-Greedy Policy&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 방법으로 하면, 10%는 랜덤으로 이동해보고, 나머지 90%는 아는길로 간다.&lt;/p&gt;

&lt;h2 id=&quot;decaying-e-greedy&quot;&gt;decaying E-Greedy&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;E-Greedy와 비슷하지만, 학습이 거듭될 수록 랜덤으로 길을 가는 확률이 줄어든다. 즉 학습 초반부에는 새로운길로 많이 가보고,
학습이 거듭될 수록 새로운길로 가볼 확률이 줄어든다.&lt;/p&gt;

&lt;h2 id=&quot;add-ramdom-noise&quot;&gt;Add Ramdom noise&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DRL_01_04.png&quot; alt=&quot;Exploit VS Exploration : add random noise (출처:http://hunkim.github.io/ml/)&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#노이즈를 추가할때 i+1을 통해 반복될 수록 noise의 값을 줄여준다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;현재 알고 있는 reward에 random 한 값을 더해버린다. 그렇게하면 reward의 max값이 변해서 argmax를 선택할 때 새로운 길로
갈 수 있게 된다.
E-Greedy와의 차이점은 E-Greedy의 경우 완전한 랜덤한 길로 가게될 확률이 높지만, noise를 추가하는 방식은 2번째,3번째 reward가 높은
길로 갈 수 있는 확률이 높아 지게 된다. 즉 가능성이 높은 길을 가볼 수 있는 확률이 높아지게 된다.&lt;/p&gt;

&lt;h2 id=&quot;discounted-reward&quot;&gt;discounted reward&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DRL_01_05.png&quot; alt=&quot;Exploit VS Exploration : add random noise (출처:http://hunkim.github.io/ml/)&quot; /&gt;
위의 그림처럼 길1번과 길2번이 있을때 어떤 길이 더 좋은길일까요?
당연히 가깝게 갈 수 있는 2번길이 더 좋을 것 입니다. 그럼 Q는 어떻게 더 좋은길을 알 수 있을까요? 양쪽길 모두 Reward가 동일한 1이기때문에
선택할때 에매해지는 문제가 있습니다.(즉 Q입장에서는 어떤길이 더 좋은 길인지 알 수 없습니다.)&lt;/p&gt;

&lt;p&gt;이것을 해결할 수 있는 방법이 Discounted reward 입니다. &lt;br /&gt;
&lt;img src=&quot;/assets/images/DRL_01_05.png&quot; alt=&quot;Discounted reward r=0.9 (출처:http://hunkim.github.io/ml/)&quot; /&gt;
여기서 빨간색으로 된 값을 보면, 이전에는 양쪽길 모두 1이었지만, reward를 계산할때 discount를 수행하면 두 길의 reward의 값이 달라지는
것을 확인할 수 있습니다. 이렇게 하면 좀 더 가까운 길로 갈 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#The Q-Table learning algorithm&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;#Get new state and reward from environment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;#Update Q-Table with new knowledge using learning rate&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;converge&quot;&gt;Converge&lt;/h2&gt;
&lt;p&gt;실제로 테스트하는 Q 값은 최종적인 값은 아니다. 즉 Q^은 Q값을 Approxmity하는 값이다.
그럼 Q^은 정말 Q값을 Approxmity할까?&lt;/p&gt;

&lt;p&gt;그렇게 되려면 아래의 2가지 조건이 만족되어야 한다.
1) In deterministic world (어떤 방향으로 움직였을 때 항상 같은 값을 갖아야 한다)
2) In finite states (상태가 유한해야 한다)&lt;/p&gt;

&lt;p&gt;즉 위와 같은 조건이 아니면 Q-learning을 사용할 수 없다는 뜻이 된다.&lt;/p&gt;

&lt;h2 id=&quot;related-article&quot;&gt;Related Article&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Lecture 1~4. OpenAI Gym and Dummy Q-learning (현재 페이지)&lt;/li&gt;
  &lt;li&gt;Lecture 5. Q-learning in non-deterministic World(comming soon)&lt;/li&gt;
  &lt;li&gt;Lecture 6. Q-Network (comming soon)&lt;/li&gt;
  &lt;li&gt;Lecture 7. DQN (comming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://hunkim.github.io/ml/&quot;&gt;모두를 위한 머신러닝/딥러닝 강의&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/jaehwant/machine_learning_study&quot;&gt;예제 소스 Github : https://github.com/jaehwant/machine_learning_study&lt;/a&gt;&lt;/p&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="머신러닝" /><summary type="html"></summary></entry><entry><title type="html">Neural Network1, XOR 문제와 학습방법 (L08)</title><link href="http://localhost:4000/machinelearning/2017/08/05/7/" rel="alternate" type="text/html" title="Neural Network1, XOR 문제와 학습방법 (L08)" /><published>2017-08-05T00:00:00+09:00</published><updated>2017-08-05T00:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2017/08/05/7</id><content type="html" xml:base="http://localhost:4000/machinelearning/2017/08/05/7/">&lt;!-- more --&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;모두를 위한 머신러닝/딥러닝 강의&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 를 수강하며 정리하는 페이지 입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lecture 8, XOR 문제 딥러닝으로 풀기 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;강의정리&quot;&gt;강의정리&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;hunkim.github.io 강좌 Lecture 8번(XOR 문제 딥러닝으로 풀기) 입니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;neural-network을-사용해서-xor-풀기&quot;&gt;Neural Network을 사용해서 XOR 풀기&lt;/h3&gt;
&lt;p&gt;기존에 Machine Learning이 정체되었던 시기에는 XOR 문제에 대해서 Machine Learning을 사용하여 풀 수 없다고 생각하던 시절이 있었습니다. 기존에 문제를 풀어나가던 방식으로는 풀 수 없다는 것이 수학적으로 증명되었습니다. 아마도 그 당시 Computing power 또한 낮았기 때문에 더 풀 수 없었던 것 습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;XOR 이란?
Exclusive OR 연산으로 두개의 값이 같으면 0 다르면 1이 되는 논리연산 입니다. &lt;br /&gt;
위의 그래프를 보면 알 수 있듯이 단순한 직선으로는 XOR를 구분할 수 없습니다.
&lt;img src=&quot;/assets/images/DL_L8_xor.png&quot; alt=&quot;그림1. XOR by hunkim&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NN을 이용해서 XOR 풀기 (forward propagation)
기존에 사용하던 Logistic regression을 neural net으로 만들어서 푸는방법 &lt;br /&gt;
물론 이 방법도 예전에는 풀 수 없을 것이라는 확신에 가득한 이야기를 한 사람도 있습니다.&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;“No one on earth had found a viable way to train - Marvin Minsky”&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/DL_L8_nn_1.png&quot; alt=&quot;그림2. NN을 이용해 XOR 풀기 by hunkim&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 각 Logistic Regression의 Weight 값과 Bias 값은 미리 정해놓고 NN으로 XOR을 풀 수 있는지 확인해보고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/DL_L8_nn_2.png&quot; alt=&quot;그림3. NN을 이용해 XOR 풀기 by hunkim&quot; /&gt;
위의 그림을 보고 값을 대입해서 풀어보면 NN으로 XOR을 푸는게 가능해 보입니다. 하지만 예제는 답이나올만한 Weight 값과 Bias를 입력했으니 쉽게 나오는 것 같지만, 예전에는 이 문제를 풀기가 어려웠습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;간략한 설명 x1 = 0, x2 = 0 일때, (XOR 하면 답은 0이 나옴)&lt;/li&gt;
  &lt;li&gt;우선 첫번째 neurun에서 x1,x2를 사용하여 y1을 구합니다. 행렬곱을 해야 하는데요, 좀 풀어서 쓰면 아래처럼 됩니다.&lt;/li&gt;
  &lt;li&gt;x1&lt;em&gt;w + x2&lt;/em&gt;w -8, x1과 x2는 0이기 때문에 -8이 나옵니다. -8이라는 값을 sigmoid 함수를 수행하면 0보다 작기 때문에 0이 됩니다. 그래서 y1은 0이 됩니다.&lt;/li&gt;
  &lt;li&gt;이제 y2를 구해보겠습니다. 마찬가지로 x1&lt;em&gt;w + x2&lt;/em&gt;w + 3이됩니다. x1,x2는 0이기 때문에 3이 나오고, 이 값을 sigmoid를 수행하면 0보다 크기 때문에 y2는 1이 됩니다.&lt;/li&gt;
  &lt;li&gt;자 이제 y1 = 0, y2 = 1이 나왔습니다. 이 값을 마지막 NN에 대입해서 풀어 봅니다. y1&lt;em&gt;w + y2&lt;/em&gt;w + 6, 대입해보면 y1은 0이기 때문에 생략하면 -11 +6 이 됩니다. 그럼 -5가 됩니다. 이 값을 Sigmoid를 수행하면 값이 0보다 작기 때문에 0이 나옵니다.&lt;/li&gt;
  &lt;li&gt;즉 [0,0] 일때 출력은 0이 나왔습니다. (XOR과 동일하죠?)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/DL_L8_nn_3.png&quot; alt=&quot;그림4. NN을 이용해 XOR 풀기 by hunkim&quot; /&gt;
왼쪽의 Network을 matrix를 사용하여 오른쪽의 모양으로 수정할 수 있습니다. 즉 구현할때 두개의 Logistic regression 모양을 따로 생성하는게 아니라 matrix를 사용해서 한개로 묶어서 표현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/DL_L8_nn_4.png&quot; alt=&quot;그림5. 동일한 계층의 NN을 묶어서 matrix로 처리하는 방법 by hunkim&quot; /&gt;
아까는 별개로 있던 network를 matrix를 이용해 하나로 합친 모습입니다.
실제로 구현하는 소스에서도 훨씬 간단하게 표현되는 것을 알 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigmoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hypothesis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigmoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matmul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;여기까지는-이미-주어진-값으로-테스트해보는-방법이었습니다&quot;&gt;여기까지는 이미 주어진 값으로 테스트해보는 방법이었습니다.&lt;/h3&gt;
&lt;p&gt;그럼 어떻게 W값과 b값을 자동으로 알아낼 수 있을까요?
W값과 b값을 안다는 것은 학습을 통해서 Cost를 계산하고 cost 가 minimize 된 값을 찾는 것을 뜻합니다.
이 부분이 어려워서 이 XOR 문제를 풀지 못했는데요. 풀 수 있게 해준 방법이 나왔습니다.&lt;/p&gt;

&lt;p&gt;바로&lt;/p&gt;

&lt;p&gt;Backpropagation 입니다. &lt;br /&gt;
Backpropagation에 대해서는 다음시간에 조금더 자세히 포스팅하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://hunkim.github.io/ml/&quot;&gt;모두를 위한 머신러닝/딥러닝 강의&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jaehwan Park</name></author><category term="머신러닝" /><summary type="html"></summary></entry><entry><title type="html">Machine learning system design (W6-2)</title><link href="http://localhost:4000/machinelearning/2017/08/01/6/" rel="alternate" type="text/html" title="Machine learning system design (W6-2)" /><published>2017-08-01T00:00:00+09:00</published><updated>2017-08-01T00:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2017/08/01/6</id><content type="html" xml:base="http://localhost:4000/machinelearning/2017/08/01/6/">&lt;!-- more --&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;Coursera의 Machine Learning&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; by Andrew Ng교수님의 강의를 수강하며 정리하는 페이지 입니다. &lt;br /&gt;
저도 배우고 있어서 일부 내용에 오류가 있을 수 있습니다. &lt;br /&gt;
관련 부분에 대해서 추가되는 내용은 업데이트를 계속 해나갈 생각 입니다.&lt;/p&gt;

&lt;h2 id=&quot;강의정리&quot;&gt;강의정리&lt;/h2&gt;
&lt;p&gt;Week6 의 2번째 챕터 입니다.(&lt;a href=&quot;https://www.coursera.org/learn/machine-learning/home/week/6&quot;&gt;Machine Learning System Design&lt;/a&gt;) &lt;br /&gt;
머신러닝 시스템 설계하는 방법 과 고려해야할 부분에 대해서 설명해주는 강의 입니다.&lt;/p&gt;

&lt;h3 id=&quot;prioritizing-what-to-work-on-spam-classification-example&quot;&gt;Prioritizing what to work on: Spam classification example&lt;/h3&gt;
&lt;p&gt;스팸필터를 어떻게 만들어야 할까요? 우선 아래의 스팸필터예제를 살펴보겠습니다.
스팸을 구분하는데 있어서 다양한 방법이 있겠지만, 단순히 아래처럼 일부단어에 의도적인 오타가 입려력되어 있고,
 특정한 단어를 많이 사용한다고 가정 합니다.
&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_1.png&quot; alt=&quot;그림1. Building a spam classifier by Andrew Ng&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 Supervised learning 방식으로 spam classifier를 만듭니다. &lt;br /&gt;
학습데이터인 x는 spam에 사용된 단어로 우선 100개를 선정해서 feature를 만듭니다. y는 스팸인지 아닌지에 대한 결과값을 넣는데 사용 합니다.
&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_2.png&quot; alt=&quot;그림2. Building a spam classifier by Andrew Ng&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자 이제 아주 간단한 스팸 필터가 생성되었습니다. &lt;br /&gt;
이제 이 스팸필터의 정확성을 높이기 위해서 어떤방법을 사용할 수 있을까요?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;많은 양의 데이터를 수집한다. (허니팟&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; : 스팸메일을 모아올 가상의 시스템)&lt;/li&gt;
  &lt;li&gt;스팸메일을 헤더를 이용한다. 그리고 유사단어와 다른단어를 구분할 알고리즘을 개발한다.&lt;/li&gt;
  &lt;li&gt;잘못된 철자(w4tch)를 처리하는 알고리즘 을 개발한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하지만 위의 방법중 어떤 것이 가장 좋을지는 선택하기엔 어렵습니다.&lt;/p&gt;

&lt;h3 id=&quot;error-analysis&quot;&gt;Error analysis&lt;/h3&gt;
&lt;p&gt;제안 하는 접근 방법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;신속하게 구현해본다. 간단한 알고리즘으로 시작하고 교차검증&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 데이터를 사용해 테스트해본다&lt;/li&gt;
  &lt;li&gt;학습곡선을 그려본다. 학습곡선을 통해 데이터가 더 필요한지, feature 가 필요한지 결정할 수 있다.&lt;/li&gt;
  &lt;li&gt;교차검증데이터를 활용해서 어떤 부분에 오류가 발생했는지 분석해본다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_3.png&quot; alt=&quot;그림3. Error Analysis by Andrew Ng&quot; /&gt;
약 500개의 교차검증 셋이 있고, 이 중에서 약 100개가 잘못 분류되었다고 한다면 직접 100개가 잘못 분류된 원인을 분석해볼 수 있습니다.
예를들면 잘못분류된 스팸메일의 종류를 분류해볼 수 있습니다.(약물판매,유사제품,피싱메일,그외)
또는 의도되 오타(med1cine)를 검출하거나, 이상한 문장부호를 사용하는 것을 찾을 수 있습니다. &lt;br /&gt;
위에서도 이야기했지만, 신속하고 간단한 알고리즘으로 시작하는것은 이런 교차검증 셋으로 미쳐 발견하지 못했던 문제점들을 분석하고 찾을 수 있기 때문입니다.&lt;/p&gt;

&lt;h3 id=&quot;the-importance-of-numerical-evaluation&quot;&gt;The importance of numerical evaluation&lt;/h3&gt;
&lt;p&gt;알고리즘을 평가할때 숫자로 평가할 수 있어야 합니다. 아래의 예를 살펴 보겠습니다. &lt;br /&gt;
유사단어에 대해서 stemming software를 사용할 수 있습니다. &lt;br /&gt;
예를들면 discount, discounts, discounted, discounting 을 discount 한단어로 처리할 수 있습니다.
이런 소프트웨어를 “stemming software&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;” 라고 합니다. 이렇게 유사단어들에 대해서 stemming software 를 적용한다면, 더 적은 수의 feature를 사용할 수 있습니다.
하지만 stemming software 에도 문제점은 있습니다. 예를들면 univers 와 university를 구분하는것은 잘못 구분될 수 있습니다.&lt;/p&gt;

&lt;p&gt;그럼 이러한 stemming software를 사용해야 할까요? 거기에 대한 판단을 바로 적용했을 때의 결과 에러율을 보고 판단할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stemmer를 사용하지 않았을 때 : 5% 에러&lt;/li&gt;
  &lt;li&gt;Stemmer를 사용했을 때 : 3% 에러&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위처럼 적용했을 때의 통계가 사용했을 때 에러율이 더 낮아진다면 사용하는게 좋을 수 있습니다.&lt;/p&gt;

&lt;p&gt;그리고 강좌에서 Andrew Ng은 머신러닝 시스템을 디자인 할 때, 빠르게 알고리즘을 설계하고 구현하는것이 좋다고 합니다. 초기에 많은 시간을 들이는 것 보다
빠르게 구현해보고 모델에 대해 평가해본 후, 부족한 점에 대해서 보완하는 것이 빠르고 시간이 절약된다고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;error-metirics-for-skewed-classes&quot;&gt;Error metirics for skewed classes&lt;/h3&gt;
&lt;p&gt;예전에 예로 다루었던 cancer classification을 다시 보겠습니다.
&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_4.png&quot; alt=&quot;그림4. Cancer classification example by Andrew Ng&quot; /&gt;
logistic regression 모델을 사용해서 1%의 오류율을 달성했다고 합시다. &lt;br /&gt;
과연 이 시스템은 잘 만들어진걸까요? 맞을 확률이 99%나 되니까 잘 된걸까요?&lt;/p&gt;

&lt;p&gt;여기서 입력데이터의 skewed classes의 문제가 발생합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;skewed classes : Train 데이터가 한쪽으로 치우쳐져 있는 경우 (예를들면 전체 데이터에서 대부분 암이 아닐때,)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내가만든 logistic regression 모델의 에러율은 1%이지만, 실제로 전체 환자의 99.5%가 암이 아닙니다.  &lt;br /&gt;
즉 모든 training set에 대해서 y= 0(cancel 이 아님)을 나타내도 에러율이 0.5%가 된다는 것입니다.
이렇게 skewed 된 class에서는 위와 같은 문제가 발생하게 됩니다. 단순히 에러율만을 가지고는 모델을 평가하기 어렵습니다.&lt;/p&gt;

&lt;p&gt;그럼 어떻게 해야할까요?&lt;/p&gt;

&lt;p&gt;에러율 이외에 시스템을 평가할 수 있는방법은  Precision(정밀도) 과 Recall(재현율) matrix 가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;링크 : &lt;a href=&quot;http://darkpgmr.tistory.com/162&quot;&gt;precision 과 recall의 이해&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Precision(정밀도) :  검출된 결과가 얼마나 정확한지 여부&lt;/li&gt;
  &lt;li&gt;Recall(재현율) : 실제 검출되어야할 결과가 얼마나 잘 나왔는지 여부&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Actual class 1(True)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Actual class 0 (False)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;predicted class 1(True)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True positive&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False positive&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Predicted class 0(False)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;False negative&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;True negative&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;실제 암환자가 100명중에 5명(5%) 있다고 가정해 봅시다. 제가 만든 linear regression 모델로는 10%의 확률로 검출합니다. &lt;br /&gt;
즉 100명의 환자에서 10명이 암이 있다고 예측 했습니다.&lt;/p&gt;

&lt;p&gt;자 이제 이 결과가 맞다고 할 수 있을까요? &lt;br /&gt;
분류하는 것도 중요하지만, 얼마나 정확하게 실제의 데이터를 분류해냈는지도 검토해봐야 합니다.
위의 예를 가지고 다시 Metrics 를 그려 보겠습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Actual class 1(True)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Actual class 0 (False)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;predicted class 1(True)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Predicted class 0(False)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;88&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;실제 암환자의 수는 5명 입니다. &lt;br /&gt;
우리의 시스템은 암을 10명 있다고 분류하였습니다.(실제로 10명중에서 3명이 암 입니다.) &lt;br /&gt;
그리고 암이 아니라고 분류된 것은 90명 입니다. (실제로 90명 중에서 2명은 암 입니다.)&lt;/p&gt;

&lt;p&gt;여기서 Precision(정확도) = (True Positive)/(True positive + False Positive) 입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Precision(정확도) = (3) / (3+ 7) = 30%
즉 모델에서 예측한 10명중에 실제 암은 3명으로 검출의 정확도가 30%밖에 안되는 것이죠.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 Recall(재현율) = (True Positive) / (True Positive + (False Negative)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Recall(재현율) = (3) / (3 + 2) = 60%
즉 모델의 결과가 실제 암을 얼마나 찾아 냈는지 여부를 나타 냅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;trading-off-precision-and-recall&quot;&gt;Trading off precision and recall&lt;/h3&gt;
&lt;p&gt;Precision 과 Recall을 모두 만족시킬 수는 없을까요?
&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_5.png&quot; alt=&quot;그림5. trading off precision and recall by Andrew Ng&quot; /&gt;
안타깝게도 precision 과 recall은 Trade off 관계 입니다. &lt;br /&gt;
암을 진단하는 Tumer의 사이즈의 임계값을 증가시킨다고 가정해 봅시다. 그렇게되면 암이라고 판단되는 경우는 줄어 들게 됩니다.
(암을 구별하는 임계값이 높아졌기 때문에) 이렇게되면 Precision은 증가합니다. 하지만 암을 암으로 판단하지 못하는 경우가 발생하기 때문에
Recall은 낮아지게 됩니다. &lt;br /&gt;
정확도는 증가하지만, 재현율은 감소되는 것이죠.&lt;/p&gt;

&lt;p&gt;반대로 암을 판단하는 임계값을 낮춘다고 가정해 봅시다. &lt;br /&gt;
임계값이 낮아졌기 때문에 암으로 판단되는 수는 많아 집니다. 당연히 정확도는 감소하게 됩니다.
반대로 실제 암을 암이라고 판단할 확률이 높아지기 때문에 잘못 구분할 확률이 줄어들어서 재현율은 높아집니다. &lt;br /&gt;
정확도는 낮아졌지만, 재현율은 높아지는 것이죠.&lt;/p&gt;

&lt;p&gt;그 둘의 상관관계가 위 그림의 오른쪽에 있는 그래프 입니다. &lt;br /&gt;
Threshold가 0.09이면 실제 암보다 암을 적게 분류하기 때문에(반대로 Error가 감소) 정확도는 높아집니다. 하지만 실제 암을 정확히 분류하지
못했기 때문에 재현율은 감소 되죠. &lt;br /&gt;
Threshold가 0.01이면 실제 암보다 암을 많이 분류하기 때문에(Error가 증가) 정확도가 낮아집니다. 하지만 실제 암은 더 많이 포함되기 때문에
재현율은 증가하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그럼 최적의 Threshold는 어떻게 결정해야 할까요?&lt;/strong&gt;
Precision 과 recall 을 조합해서 사용하면 됩니다. 바로 &lt;strong&gt;F score&lt;/strong&gt; 입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;F score = 2 * (Precision * Recall) / (Precision + Recall)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_6.png&quot; alt=&quot;그림6. F Score  by Andrew Ng&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 3개의 알고리즘 중에서 F score 가 높은 Algorithm 1 이 가장 좋다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;data-for-machine-learning&quot;&gt;Data for machine learning&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_7.png&quot; alt=&quot;그림7. Desiging a high accuracy learning system&quot; /&gt;
단어나 문장을 완성하는 머신러닝 알고리즘을 만들 때 위와 같은 알고리즘들을 사용할 수 있습니다.
(perceptron, Winnow, Memory-based, naive Bayes 등등)&lt;/p&gt;

&lt;p&gt;그림7의 오른쪽의 그래프를 보면 Training set의 크기에 따라서 점차 정확도가 비슷해진다는 것을 확인할 수 있습니다.
즉 좋은 알고리즘을 사용하는 것도 중요하지만, Training set를 많이 보유하는 것도 중요하다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_8.png&quot; alt=&quot;그림8. large data rationale&quot; /&gt;
많은 데이터를 가지고 있는 것도 중요하지만, 그 중에서 좋은 정보가 무었인지 구분하는 것도 중요합니다. &lt;br /&gt;
집을 구하는 것을 예를 들면 집의 평수만을 가지고 집값을 대략적으로 예측할 수 는 있습니다. 하지만 크기만이 집값을 결정하는
요소는 아닌데요, 다양한 요소들이 있을 수 있습니다. 방의 갯수, 위치, 주변시설등이 있습니다. 이 Feature에 대한 영향력을 어떻게 검증할 수 있을까요?
그리고 이 Feature가 영향을 줄 수 있는지 어떻게 알 수 있을까요? 좀더 쉬운 방법중 하나는 사람(전문가)가 주어진 x와 y로 예측할 수 있는지 검토해보는 것 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ML6_2_spam_filter_example_9.png&quot; alt=&quot;그림9. large data rationale&quot; /&gt;
많은 데이터를 사용해서 알고리즘을 구현할 때 많은 Feature를 사용하는 logistic regression/linear regression 과 많은 수의 hidden unit을 사용하는
neural network들은 &lt;strong&gt;low bias algorithm&lt;/strong&gt; 일 가능성이 높습니다.&lt;/p&gt;

&lt;p&gt;또한 많은 training set 을 사용하게 되면 overfit 되어 Jtest 와 Jtrain이 비슷해질 수 있습니다.&lt;/p&gt;

&lt;p&gt;이전 강의에서 다룬 bias와 variance에 대해 배운것처럼 알고리즘이 어떤 성향을 보이는지 여부에 따라 알고리즘의 복잡도를 조절하거나, 데이터의 양을 늘림으로서
좋은 결과를 나타내는 머신러닝 시스템을 만들 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.4four.us/article/2010/11/bias-variance-tradeoff&quot;&gt;링크 : Bias-Variance Tradeoff:경험에서 배울 때 주의사항&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/machine-learning/home/welcome&quot;&gt;Coursera : Machine Learning Stanford University&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Honeypot_(computing)&quot;&gt;허니팟(honeypot) 해커들을 유인하는 꿀단지, 즉 정보가 있는 것처럼 보이는 가상 시스템 :&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;교차검증(corss-validation data) : 예를들면 Supervised learning 을 위한 학습데이터가 있다면 (60%는 traing set, 20% 는 cross validation set, 20%는 test set으로 사용) &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%96%B4%EA%B0%84_%EC%B6%94%EC%B6%9C&quot;&gt;stemming software&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tartarus.org/martin/PorterStemmer/&quot;&gt;Poter stemmer&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jaehwan Park</name></author><category term="머신러닝" /><summary type="html"></summary></entry><entry><title type="html">머신러닝의 개념 및 용어 (L01)</title><link href="http://localhost:4000/machinelearning/2017/06/13/5/" rel="alternate" type="text/html" title="머신러닝의 개념 및 용어 (L01)" /><published>2017-06-13T00:00:00+09:00</published><updated>2017-06-13T00:00:00+09:00</updated><id>http://localhost:4000/machinelearning/2017/06/13/5</id><content type="html" xml:base="http://localhost:4000/machinelearning/2017/06/13/5/">&lt;!-- more --&gt;

&lt;h2 id=&quot;들어가며&quot;&gt;들어가며&lt;/h2&gt;
&lt;p&gt;모두를 위한 머신러닝/딥러닝 강의&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 를 수강하며 정리하는 페이지 입니다. 저도 공부하는 입장이라서 내용에 오류가 있을 수 있습니다.
관련 부분에 대해서 추가되는 내용은 업데이트를 계속 해나갈 생각 입니다.&lt;/p&gt;

&lt;h2 id=&quot;windows-기반에서-tensorflow-설치방법&quot;&gt;Windows 기반에서 Tensorflow 설치방법&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tensorflow.org/install/install_windows&quot;&gt;전체적인 설치가이드는 Tensorflow 사이트를 참고하면 됩니다.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1) &lt;a href=&quot;https://www.python.org/downloads/release/python-352/&quot;&gt;Python 3.5x 버젼 설치&lt;/a&gt; &lt;br /&gt;
2) &lt;a href=&quot;https://www.continuum.io/downloads&quot;&gt;Anaconda 설치&lt;/a&gt; &lt;br /&gt;
3) &lt;a href=&quot;https://www.jetbrains.com/pycharm/download/#section=windows&quot;&gt;PyCharm Community Edition 설치&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;머신러닝의-개념-및-용어&quot;&gt;머신러닝의 개념 및 용어&lt;/h2&gt;
&lt;p&gt;기존 프로그램은 명확한 규칙과 로직을 가지고 프로그래밍 되었기 때문에, 복잡한 룰을 가지고,
규칙을 세우기 어려운 프로그램을 작성하는데는 어려움이 있었습니다. 개발자가 일일이 정하지 않고,
학습해서 뭔가를 배우는 능력을 갖는 프로그램을 만드는 것이 머신러닝 입니다.&lt;/p&gt;

&lt;p&gt;머신러닝은 크게 2가지로 나눌 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;supervised-learning&quot;&gt;Supervised learning&lt;/h2&gt;
&lt;p&gt;트레이닝 셋을 미리 제공하여 학습하는 방법 (고양이 이미지 100장, 개 이미지 100장)을
Labeling 하여 data set을 만들고 그 Data를 통해 학습시킬 수 있습니다.
대부분의 지도 학습은 비용함수(Cost function)를 통해 결과 값의 오류를 줄여나가는 방식으로 동작한다.&lt;/p&gt;

&lt;p&gt;지도학습에서는 입력값과 출력값 사이에 관계가 있다고 생각하고 문제를 해결하기 위한 방법으로 주로 사용되는 부분은 회귀분석(Regression) 과 분류(Classification)에 주로 사용된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;부동산크기와 가격과의 상관관계를 풀때 (Regression)
종양을 가진 환자와 종양이 없는 환자를 분류할 때 ( Binary classification) 혹은 학점을 A,B,C,D와 같이 나눠서 분류할 수 있을때(Multi-label classification)을 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;1)Type of supervised learning&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Regression&lt;/li&gt;
  &lt;li&gt;Binary Classification&lt;/li&gt;
  &lt;li&gt;Multi-label classification&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linear-regression-예제-수행결과&quot;&gt;Linear regression 예제 수행결과&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Lab 2 Linear Regression&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_random_seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#난수를 생성하는데 같은 seed값을 쓰면 해당 난수가 항상 일정한 숫자가 나온다.&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 1) 학습시킬 X와 Y값을 주어준다. (x가 1일때, y가 1)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# tf.Variable == Tensorflow가 사용하는 변수, trainable 한 변수이다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# tensorflow 가 학습시키는 과정에서 사용되는 변수&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# random_normal[1] 값이 1개인 1차원 Array를 나타냄&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bias'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# hypothesis 노드 생성&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hypothesis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;W&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# cost/loss function&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# reduce_mean 은 주어진 tensor 에서의 평균값을 내준다. ( t = [1,2,3,4] 일때, reduce_mean을 수행하면 2.5가 나온다.)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce_mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypothesis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Minimize&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GradientDescentOptimizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;learning_rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Launch the graph in a session.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 변수를 사용하기 전에는 항상 초기화를 해줘야 한다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#tensorboard 에서 Graph 를 확인하기 위한 코드&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;merged&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./logs/lap-02-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Fit the line&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;예제-수행결과&quot;&gt;예제 수행결과&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 2.82329 [ 2.12867713] [-0.85235667]
20 0.190351 [ 1.53392804] [-1.05059612]
40 0.151357 [ 1.45725465] [-1.02391243]
...
960 1.46397e-05 [ 1.004444] [-0.01010205]
1980 1.32962e-05 [ 1.00423515] [-0.00962736]
2000 1.20761e-05 [ 1.00403607] [-0.00917497]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;위의-모델을-tensorboard-를-사용하여-graph를-출력해보면-아래와-같이-나옵니다&quot;&gt;위의 모델을 Tensorboard 를 사용하여 Graph를 출력해보면 아래와 같이 나옵니다.&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/DL_L1_tensorboard.png&quot; alt=&quot;그림1. Tensorboard 수행 결과&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;unsupervised-learning&quot;&gt;Unsupervised learning&lt;/h2&gt;
&lt;p&gt;비지도 학습은 데이터의 상호 유사성을 이용해 공통된 특징을 찾아내는 과정을 통해 찾아내는 방식이다.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://hunkim.github.io/ml/&quot;&gt;http://hunkim.github.io/ml/&lt;/a&gt; &lt;br /&gt;
[2] &lt;a href=&quot;https://github.com/hunkim/DeepLearningZeroToAll&quot;&gt;https://github.com/hunkim/DeepLearningZeroToAll&lt;/a&gt; &lt;br /&gt;
[2] &lt;a href=&quot;http://www.holehouse.org/mlclass/01_02_Introduction_regression_analysis_and_gr.html&quot;&gt;http://www.holehouse.org/mlclass/01_02_Introduction_regression_analysis_and_gr.html&lt;/a&gt; &lt;br /&gt;
[3] 텐서플로 입문 (예제로 배우는 텐서플로) &lt;br /&gt;
[4] 텐서플로 첫걸음&lt;/p&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://hunkim.github.io/ml/&quot;&gt;모두를 위한 머신러닝/딥러닝 강의&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jaehwan Park</name></author><category term="머신러닝" /><summary type="html"></summary></entry><entry><title type="html">비즈니스 협상 - 통합적 협상이란</title><link href="http://localhost:4000/business/2016/10/28/4/" rel="alternate" type="text/html" title="비즈니스 협상 - 통합적 협상이란" /><published>2016-10-28T00:00:00+09:00</published><updated>2016-10-28T00:00:00+09:00</updated><id>http://localhost:4000/business/2016/10/28/4</id><content type="html" xml:base="http://localhost:4000/business/2016/10/28/4/">&lt;!-- more --&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview:&lt;/h2&gt;
&lt;p&gt;대학원에서 비즈니스 협상을 수강하며 정리한 노트 입니다. &lt;br /&gt;
수업내용을 정리한 것이라서 일부 부족하거나 잘못된 부분이 있을 수 있습니다. &lt;br /&gt;
혹시 잘못된 부분이나 궁금한 것이 있으면 아래 Disqus 댓글을 통해 알려주세요 :)&lt;/p&gt;

&lt;h2 id=&quot;통합적-협상의-특성&quot;&gt;통합적 협상의 특성&lt;/h2&gt;
&lt;p&gt;바로 이전에 투쟁적 협상에 대해서 알아봤었는데요  &lt;br /&gt;
통합적 협상은 서로의 입장에서 생각하는 것에서 벗어나, 근본적인 이해관계를 생각하는 협상입니다.  &lt;br /&gt;
통합적 협상에서는 모든 협상당사자의 욕구를 충족시키고자 노력하게 되고, 상호간의 공통점 강조 및 차이를 최소화 하려고 합니다.  &lt;br /&gt;
서로 정보와 아이디어 교환도 활발하고 상호 이익이 되는 대안을 찾기위해서 노력합니다.&lt;/p&gt;

&lt;h2 id=&quot;통합적-협상의-단계&quot;&gt;통합적 협상의 단계&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;문제를 확인하고 정의하기
    &lt;ul&gt;
      &lt;li&gt;양자가 수긍할 수 있는 방식으로 문제를 정의하기&lt;/li&gt;
      &lt;li&gt;문제해결을 목표로 삼고, 목표의 장애요인을 찾는다.&lt;/li&gt;
      &lt;li&gt;문제를 객관화 하고 문제정의 과정과 해결과정을 분리한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서로 추구하는 이익의 명확화
    &lt;ul&gt;
      &lt;li&gt;이익(Interest)과 입장(Position)으로 구분하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;협상의 대안 찾기
    &lt;ul&gt;
      &lt;li&gt;타협하기, 통나무타기, 파이바꾸기, 순응의 댓가 줄이기, 순응 등 방법을 사용하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대안평가 하고 최적 대안 찾기
    &lt;ul&gt;
      &lt;li&gt;객관적 지표, 질적 평가, 합의가능성 평가하기&lt;/li&gt;
      &lt;li&gt;개인의 선호를 명확하기 제시하기 : 위험회피정도, 시간, 가치관등&lt;/li&gt;
      &lt;li&gt;필요할 경우 냉각기간을 갖기, 최종 합의가 될 때까지 결정을 조건부로 하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interest-와-position을-구분하기&quot;&gt;Interest 와 Position을 구분하기&lt;/h2&gt;
&lt;p&gt;Interest 와 Postion은 무었일까요?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Interest : 명시적 요구 속에 숨겨져있는 근원적 욕구&lt;/li&gt;
  &lt;li&gt;Position : 명시적으로 요구하는 사항&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 2개를 구분하는 쉬운 예가 있는데요,
예를 들면 슈퍼마켓에 어떤 손님이 들어와서 “사이다 한병 주세요” 라고 말했다고 가정해 볼게요&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;여기서 “사이다 한병 주세요” 가 Postion 입니다.
손님은 명시적으로 “사이다 한병 주세요” 라고 얘기하고 있어요
그럼 여기서 손님의 Interest(숨겨진 욕구)는 무었일까요??  “목이 말라서 시원한 음료를 마시고 싶다” 일꺼에요
바로 Interest를 발견하기 위해서는 Why? 를 생각해보면 되는데요,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;만약에 슈퍼마켓에 사이다가 없을때 손님이 “사이다 주세요” 라고 요구한다면,없다고 그냥 보내시겠어요?
아니면 손님의 “목이 말라서 시원한 음료를 먹고싶다”는 내면적 요구를 조금 변경해서 다른 음료를 권할 수 있을까요?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“손님 사이다는 다 떨어졌는데요, 갈증해소하는데 좋은 이온음료가 있습니다. 어떠신가요?”
그럼 손님은 사이다를 고집(Position을 고집)하는 경우를 제외한다면 내면적 욕구(필요성)을 만족시킬 수 있는
대안이 있다면 해당 대안을 선택할 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이렇게 협상을 Position 중심에서 Interest 중심으로 이동시켜나가게되면, 결렬될 수 있는 협상이 이루어질 수 있어요 그리고 이 두사람 모두 각자 상호 이익이 되는 대안을 찾게 됩니다. 손님은 갈증을 해소했고, 상인은 물건을 팔게 되는거에요&lt;/p&gt;

&lt;h2 id=&quot;통합적-협상을-성공적으로-만드는-요소들&quot;&gt;통합적 협상을 성공적으로 만드는 요소들&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;공통의 목표를 설정하였는가?&lt;/li&gt;
  &lt;li&gt;상대방과 내가 문제해결 능력이 있는가?&lt;/li&gt;
  &lt;li&gt;서로의 관점이 다르다는 것을 충분히 숙지하고 있는가?&lt;/li&gt;
  &lt;li&gt;신뢰와 정확하고 명확한 의사소통&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;position-과-interest의-차이&quot;&gt;Position 과 Interest의 차이!&lt;/h2&gt;
&lt;p&gt;제가 설명하는 것보다 아래의 유튜브 동영상을 한번 보시면 더 이해가 쉬울것같습니다. &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=pgsfVlbsk88&quot;&gt;Youtube 설명자료&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;실습해보기&quot;&gt;실습해보기&lt;/h2&gt;
&lt;p&gt;아래의 사례를 통해 통합적 협상으로 발전할 수 있는지? Position을 Interest로 변화시킬 수 있는지 예를 들어 볼게요&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A : 오직 캐나다에서만 나오는 특산품 “캐나다오렌지”를 구매하려고 합니다. 캐나다오렌지 껍질에서 추출한 물질을 토양에 뿌리면 아프리카에서도 곡식 수확량을 늘릴 수 있습니다. 아프리카에서는 매년 10만명이 식량 부족으로 죽고 있고, 이번 캐나다오렌지의 입찰을 저에게 매우 중요한 사안 입니다.&lt;/p&gt;

  &lt;p&gt;B : 오직 캐나다에서만 나오는 특산품 “캐나다오렌지”를 구매하려고 합니다. 캐나다오렌지 속살에서 추출한 물질은 피부주름개선에 사용할 수 있는
매우 가치있는 재료 이고, 다른곳에서는 구할 수가 없습니다. 캐나다오렌지를 구매하여 약 5만명이 사용할 수 있는 피부주름개선제를 시중에 판매를
시작하려고 합니다. 저희 비즈니스에서는 해당 재료가 매우 중요해서 이번입찰은 꼭 제가 받아야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 A와 B는 서로 입찰한다는 것을 알고 있습니다. 그래서 입찰 전달 한 카페에서 만나기로 하였습니다. 아마도 협상을 통해 가격을 조정하거나 상대를 포기하게 할  수 있을지 모릅니다.&lt;/p&gt;

&lt;p&gt;위의 상황일 때 과연 누가 낙찰받아야 할까요? 이 협상은 어떻게 진행될까요?&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;강의 : 비즈니스 협상
책 : 최고의 협상 (p150 ~ p233)&lt;/p&gt;

&lt;!-- Tip

@목차 작성
## 대목차 (오른쪽에 1.대목차 로 보인다.)
### 소목차 (오른쪽에 1.1소목차 로 보인다.)
* 오른쪽 내어쓰기

@링크
[Text](링크주소)
![Text](그림주소)

@코드 삽입 (블럭)

```
노말 블럭 (highlight 없다 .)
```

```javascript
```python
```ruby


&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;



@색상강조

`색강조(회색배경)`

@이모지 넣기
웃는 이모지 : :smile:

:bowtie::smile::laughing::blush::smiley::relaxed::smirk:
:heart_eyes::kissing_heart::kissing_closed_eyes::flushed::relieved::satisfied::grin:

@페이지 제목에 사진을 넣기(홈에서 미리보임)
photos:
- http://ww1.sinaimg.cn/mw690/81b78497jw1emfgwkasznj21hc0u0qb7.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgwjrh2pj21hc0u01g3.jpg
- http://ww2.sinaimg.cn/mw690/81b78497jw1emfgwil5xkj21hc0u0tpm.jpg
- http://ww3.sinaimg.cn/mw690/81b78497jw1emfgvcdn25j21hc0u0qpa.jpg

@테이블 넣기

| Table Header 1 | Table Header 2 | Table Header 3 |
| --- | --- | --- |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |
| Division 1 | Division 2 | Division 3 |

@테그 넣기
tags:
- Foo
- Bar
- Baz

@카테고리 넣기.
categories:
- Foo
- Bar
- Baz

--&gt;</content><author><name>Jaehwan Park</name></author><category term="협상" /><summary type="html"></summary></entry></feed>